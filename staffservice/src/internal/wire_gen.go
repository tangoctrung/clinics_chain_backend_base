// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/gin-gonic/gin"
	"github.com/minh1611/clinics_chain_management/staffservice/src/internal/api"
	"github.com/minh1611/clinics_chain_management/staffservice/src/internal/db"
	"github.com/minh1611/clinics_chain_management/staffservice/src/internal/db/psql"
	"github.com/minh1611/clinics_chain_management/staffservice/src/internal/model"
	"github.com/minh1611/clinics_chain_management/staffservice/src/internal/service"
	"github.com/minh1611/clinics_chain_management/staffservice/src/services/authservice"
)

// Injectors from server.wire.go:

func InitMainServer(ctx context.Context, opts ServerOptions) (*Server, error) {
	engine := gin.New()
	dbDsn := opts.DBDsn
	gormDB, err := db.ConnectGorm(dbDsn)
	if err != nil {
		return nil, err
	}
	dbInterfaces := psql.InterfaceProvider()
	serverCDBRepo := &psql.ServerCDBRepo{
		Db:         gormDB,
		Context:    ctx,
		Interfaces: dbInterfaces,
	}
	authServiceAddr := opts.AuthServiceAddr
	authServiceClient, err := authservice.ConnectClient(ctx, authServiceAddr)
	if err != nil {
		return nil, err
	}
	serviceGRPC := authservice.ServiceGRPC{
		Ctx:    ctx,
		Client: authServiceClient,
	}
	serverModel := &model.ServerModel{
		Ctx:  ctx,
		Repo: serverCDBRepo,
		Auth: serviceGRPC,
	}
	doctorService := &service.DoctorService{
		Model: serverModel,
	}
	doctorController := service.DoctorController{
		S: doctorService,
	}
	nurseService := &service.NurseService{
		Model: serverModel,
	}
	nurseController := service.NurseController{
		S: nurseService,
	}
	profileService := &service.ProfileService{
		Model: serverModel,
	}
	profileController := service.ProfileController{
		S: profileService,
	}
	reservationService := &service.ReservationService{
		Model: serverModel,
	}
	reservationController := service.ReservationController{
		S: reservationService,
	}
	treatmentRecordService := &service.TreatmentRecordService{
		Model: serverModel,
	}
	treatmentRecordController := service.TreatmentRecordController{
		S: treatmentRecordService,
	}
	staffService := &api.StaffService{
		G:              engine,
		Doctor:         doctorController,
		Nurse:          nurseController,
		Profile:        profileController,
		Reservation:    reservationController,
		TreatmentReord: treatmentRecordController,
	}
	server := &Server{
		StaffServer: staffService,
		MainRepo:    serverCDBRepo,
	}
	return server, nil
}

// server.wire.go:

type Server struct {
	StaffServer *api.StaffService
	MainRepo    db.ServerRepo
}

type ServerOptions struct {
	DBDsn           db.DBDsn
	AuthServiceAddr authservice.AuthServiceAddr
}
